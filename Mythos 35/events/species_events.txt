namespace = SPECIES
# Species Maintainance

# SPECIES.1 - New system for checking that proper race placements are present.
# Should be less resource heavy than old method
character_event = {
	id = SPECIES.1
	
	hide_window = yes
	ai = no
	
	mean_time_to_happen = { days = 1 }
	
	immediate = {
		if = {
			limit = {
				NOT = { has_character_flag = checked_race }
			}
			set_character_flag = checked_race
		}
	}
}
# SPECIES.2 - Actual work for setting races
character_event = {
	id = SPECIES.2
	
	hide_window = yes
	is_triggered_only = yes
	
	ai = yes # Players will either be set through the ruler designer or have been AI, be manually created in history, or have previously been AI.
	
	#mean_time_to_happen = { days = 1 }
	trigger = {
		trait = race_placeholder
		NOT = { has_character_flag = checked_race }
	}
	
	immediate = {
		remove_trait = race_placeholder
		set_character_flag = checked_race
		
		# Remove existing race traits to be sure
		
		remove_trait = god
		remove_trait = demi_god
		remove_trait = blood_of_the_gods
		remove_trait = mythos_giant
		remove_trait = half_giant
		remove_trait = djinn
		
		# Set character's biological father
		if = {
			limit = { real_father_even_if_dead = { always = yes } }
			real_father_even_if_dead = { save_event_target_as = true_father }
		}
		else = {
			father_even_if_dead = { save_event_target_as = true_father }
		}
		
		# Zombies, regardless of number of parents
		if = {
			limit = { graphical_culture = undeadgfx }
			add_trait = zombie
			set_undead_culture = yes
			if = {
				limit = { ai = no } # Not playable
				abdicate = yes
			}
			religion = the_damned
			any_claim = { remove_claim = PREV }
			character_event = { id = ZOMBIE.39 }
		}
		
		# Handle characters with 2 parents
		if = {
			limit = {
				event_target:true_father = { always = yes }
				mother_even_if_dead = { always = yes }
			}
			# Bad parent
			if = {
				limit = {
					OR = {
						event_target:true_father = {
							trait = zombie
							trait = mummy
							trait = ethereal_trait
							trait = demon_trait
						}
						mother_even_if_dead = {
							trait = zombie
							trait = mummy
							trait = ethereal_trait
							trait = demon_trait
						}
					}
				}
				add_trait = sickly
				add_trait = stressed
			}
			# Handle dragons
			# Both parents are dragons
			if = {
				limit = {
					event_target:true_father = { trait = dragon }
					mother_even_if_dead = { trait = dragon }
				}
				add_trait = dragon
				remove_trait = dragonborn
				set_graphical_culture = draconic
				# Can't be a werewolf
				remove_trait = pup
				remove_trait = fledgling
				if = {
					limit = {
						or = {
							event_target:true_father = { trait = heldragon }
							mother_even_if_dead = { trait = heldragon }
						}
					}
					add_trait = heldragon
				}
							
			}
			# Mother is dragon, father is dragonborn
			else_if = {
				limit = {
					event_target:true_father = { trait = dragonborn }
					mother_even_if_dead = { trait = dragon }
				}
				random_list = {
					3 = {
						add_trait = dragon
						remove_trait = dragonborn
						set_graphical_culture = draconic
						remove_trait = pup
						remove_trait = fledgling
					}
					7 = {
						modifier = {
							factor = 0.7
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.5
							has_game_rule = { name = breeding value = weak }
						}
						add_trait = dragonborn
						remove_trait = dragon
						if = {
							limit = { graphical_culture = dragongfx }
							if = {
								limit = { NOT = { event_target:true_father = { graphical_culture = dragongfx } } }
								set_graphical_culture = event_target:true_father
							}
							else_if = {
								limit = { NOT = { mother_even_if_dead = { graphical_culture = dragongfx } } }
								set_graphical_culture = mother_even_if_dead
							}
							else = {
								set_graphical_culture = norse
							}
						}
					}
				}
			}
			# Father is dragon, mother is dragonborn
			else_if = {
				limit = {
					event_target:true_father = { trait = dragon }
					mother_even_if_dead = { trait = dragonborn }
				}
				random_list = {
					1 = {
						add_trait = dragon
						remove_trait = dragonborn
						set_graphical_culture = draconic
						remove_trait = pup
						remove_trait = fledgling
					}
					9 = {
						modifier = {
							factor = 0.7
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.5
							has_game_rule = { name = breeding value = weak }
						}
						add_trait = dragonborn
						remove_trait = dragon
						if = {
							limit = { graphical_culture = dragongfx }
							if = {
								limit = { NOT = { event_target:true_father = { graphical_culture = dragongfx } } }
								set_graphical_culture = event_target:true_father
							}
							else_if = {
								limit = { NOT = { mother_even_if_dead = { graphical_culture = dragongfx } } }
								set_graphical_culture = mother_even_if_dead
							}
							else = {
								set_graphical_culture = norse
							}
						}
					}
				}
			}
			# Both parents are dragonborn
			else_if = {
				limit = {
					event_target:true_father = { trait = dragonborn }
					mother_even_if_dead = { trait = dragonborn }
				}
				random_list = {
					5 = {
						add_trait = dragon
						remove_trait = dragonborn
						set_graphical_culture = draconic
						remove_trait = pup
						remove_trait = fledgling
					}
					75 = {
						
						modifier = {
							factor = 0.7
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.5
							has_game_rule = { name = breeding value = weak }
						}
						add_trait = dragonborn
						remove_trait = dragon
						if = {
							limit = { graphical_culture = dragongfx }
							if = {
								limit = { NOT = { event_target:true_father = { graphical_culture = dragongfx } } }
								set_graphical_culture = event_target:true_father
							}
							else_if = {
								limit = { NOT = { mother_even_if_dead = { graphical_culture = dragongfx } } }
								set_graphical_culture = mother_even_if_dead
							}
							else = {
								set_graphical_culture = norse
							}
						}
					}
					20 = {
						modifier = {
							factor = 0.5
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 2
							has_game_rule = { name = breeding value = weak }
						}
						remove_trait = dragonborn
						remove_trait = dragon
						if = {
							limit = { graphical_culture = dragongfx }
							if = {
								limit = { NOT = { event_target:true_father = { graphical_culture = dragongfx } } }
								set_graphical_culture = event_target:true_father
							}
							else_if = {
								limit = { NOT = { mother_even_if_dead = { graphical_culture = dragongfx } } }
								set_graphical_culture = mother_even_if_dead
							}
							else = {
								set_graphical_culture = norse
							}
						}
					}
				}
			}
			# One parent is human, other is dragonborn
			else_if = {
				limit = {
					OR = {
						AND = {
							event_target:true_father = { trait = dragonborn }
							mother_even_if_dead = {
								NOR = {
									trait = dragon
									trait = dragonborn
								}
							}
						}
						AND = {
							mother_even_if_dead = { trait = dragonborn }
							event_target:true_father = {
								NOR = {
									trait = dragon
									trait = dragonborn
								}
							}
						}
					}
				}
				random_list = {
					1 = {
						add_trait = dragonborn
						remove_trait = dragon
						if = {
							limit = { graphical_culture = dragongfx }
							if = {
								limit = { NOT = { event_target:true_father = { graphical_culture = dragongfx } } }
								set_graphical_culture = event_target:true_father
							}
							else_if = {
								limit = { NOT = { mother_even_if_dead = { graphical_culture = dragongfx } } }
								set_graphical_culture = mother_even_if_dead
							}
							else = {
								set_graphical_culture = norse
							}
						}
						modifier = {
							factor = 3
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 0.5
							has_game_rule = { name = breeding value = weak }
						}
					}
					9 = {
						remove_trait = dragonborn
						remove_trait = dragon
						if = {
							limit = { graphical_culture = dragongfx }
							if = {
								limit = { NOT = { event_target:true_father = { graphical_culture = dragongfx } } }
								set_graphical_culture = event_target:true_father
							}
							else_if = {
								limit = { NOT = { mother_even_if_dead = { graphical_culture = dragongfx } } }
								set_graphical_culture = mother_even_if_dead
							}
							else = {
								set_graphical_culture = norse
							}
						}
					}
				}
			}
			# One parent is a dragon and the other is human - father is dragon
			else_if = {
				limit = {
					event_target:true_father = { trait = dragon }
					mother_even_if_dead = {
						NOR = {
							trait = dragon
							trait = dragonborn
						}
					}
				}
				add_trait = dragonborn
				remove_trait = dragon
				if = {
					limit = { graphical_culture = dragongfx }
					if = {
						limit = { NOT = { event_target:true_father = { graphical_culture = dragongfx } } }
						set_graphical_culture = event_target:true_father
					}
					else_if = {
						limit = { NOT = { mother_even_if_dead = { graphical_culture = dragongfx } } }
						set_graphical_culture = mother_even_if_dead
					}
					else = {
						set_graphical_culture = norse
					}
				}
			}
			# One parent is a dragon and the other is human - mother is dragon
			else_if = {
				limit = {
					mother_even_if_dead = { trait = dragon }
					event_target:true_father = {
						NOR = {
							trait = dragon
							trait = dragonborn
						}
					}
				}
				add_trait = dragonborn
				remove_trait = dragon
				if = {
					limit = { graphical_culture = dragongfx }
					if = {
						limit = { NOT = { event_target:true_father = { graphical_culture = dragongfx } } }
						set_graphical_culture = event_target:true_father
					}
					else_if = {
						limit = { NOT = { mother_even_if_dead = { graphical_culture = dragongfx } } }
						set_graphical_culture = mother_even_if_dead
					}
					else = {
						set_graphical_culture = norse
					}
				}
			}
			# Neither parent is dragonborn or dragon
			else = {
				remove_trait = dragonborn
				remove_trait = dragon
				if = {
					limit = { graphical_culture = dragongfx }
					if = {
						limit = { NOT = { event_target:true_father = { graphical_culture = dragongfx } } }
						set_graphical_culture = event_target:true_father
					}
					else_if = {
						limit = { NOT = { mother_even_if_dead = { graphical_culture = dragongfx } } }
						set_graphical_culture = mother_even_if_dead
					}
					else = {
						set_graphical_culture = norse
					}
				}
			}
			# Handle gods
			# Both parents are gods
			if = {
				limit = {
					event_target:true_father = { trait = god }
					mother_even_if_dead = { trait = god }
				}
				add_trait = god
				set_character_flag = gain_blood_of_the_gods
				set_character_flag = ai_flag_refuse_conversion
			}
			# One parent is god, other is human, BotG, or Demigod
			else_if = {
				limit = {
					OR = {
						AND = {
							event_target:true_father = { trait = god }
							mother_even_if_dead = { NOT = { trait = god } }
						}
						AND = {
							mother_even_if_dead = { trait = god }
							event_target:true_father = { NOT = { trait = god } }
						}
					}
				}
				add_trait = demi_god
				set_character_flag = gain_blood_of_the_gods
				set_character_flag = ai_flag_refuse_conversion
			}
			# Both parents are demigods
			else_if = {
				limit = {
					event_target:true_father = { trait = demi_god }
					mother_even_if_dead = { trait = demi_god }
				}
				random_list = {
					1 = {
						add_trait = demi_god
						set_character_flag = gain_blood_of_the_gods
						set_character_flag = ai_flag_refuse_conversion
					}
					1 = {
						modifier = {
							factor = 0.6
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.5
							has_game_rule = { name = breeding value = weak }
						}
						set_character_flag = gain_blood_of_the_gods
					}
				}
			}
			# Demigod and Human or Blood of the Gods
			else_if = {
				limit = {
					OR = {
						AND = {
							event_target:true_father = { trait = demi_god }
							mother_even_if_dead = {
								NOR = {
									trait = god
									trait = demi_god
								}
							}
						}
						AND = {
							mother_even_if_dead = { trait = demi_god }
							event_target:true_father = {
								NOR = {
									trait = god
									trait = demi_god
								}
							}
						}
					}
				}
				set_character_flag = gain_blood_of_the_gods
			}
			# One has blood of the gods, other is human
			else_if = {
				limit = {
					OR = {
						AND = {
							event_target:true_father = {
								any_owned_bloodline = { has_bloodline_flag = BOTG }
							}
							mother_even_if_dead = {
								OR = {
									trait = god
									trait = demi_god
									any_owned_bloodline = { has_bloodline_flag = BOTG }
								}
							}
						}
						AND = {
							mother_even_if_dead = {
								any_owned_bloodline = { has_bloodline_flag = BOTG }
							}
							event_target:true_father = {
								OR = {
									trait = god
									trait = demi_god
									any_owned_bloodline = { has_bloodline_flag = BOTG }
								}
							}
						}
					}
				}
				if = {
					limit = { # Any grandparent is a god or demigod, 80%
						OR = {
							mother_even_if_dead = {
								OR = {
									mother = {
										OR = {
											trait = god
											trait = demi_god
										}
									}
									true_father = {
										OR = {
											trait = god
											trait = demi_god
										}
									}
								}
							}
							event_target:true_father = {
								OR = {
									mother = {
										OR = {
											trait = god
											trait = demi_god
										}
									}
									true_father = {
										OR = {
											trait = god
											trait = demi_god
										}
									}
								}
							}
						}
					}
					random_list = {
						7 = {
							set_character_flag = gain_blood_of_the_gods
						}
						3 = {
							modifier = {
								factor = 0.6
								has_game_rule = { name = breeding value = strong }
							}
							modifier = {
								factor = 1.5
								has_game_rule = { name = breeding value = weak }
							}
						}
					}
				}
				else = {
					random_list = {
						7 = {
							set_character_flag = gain_blood_of_the_gods
						}
						3 = {
							modifier = {
								factor = 0.6
								has_game_rule = { name = breeding value = strong }
							}
							modifier = {
								factor = 1.5
								has_game_rule = { name = breeding value = weak }
							}
						}
					}
				}
			}
			# Both have blood of the gods
			else_if = {
				limit = {
					event_target:true_father = {
						any_owned_bloodline = { has_bloodline_flag = BOTG }
					}
					mother_even_if_dead = {
						any_owned_bloodline = { has_bloodline_flag = BOTG }
					}
				}
				if = {
					limit = { # Any grandparent is a god or demigod, 100%
						OR = {
							mother_even_if_dead = {
								OR = {
									mother = {
										OR = {
											trait = god
											trait = demi_god
										}
									}
									true_father = {
										OR = {
											trait = god
											trait = demi_god
										}
									}
								}
							}
							event_target:true_father = {
								OR = {
									mother = {
										OR = {
											trait = god
											trait = demi_god
										}
									}
									true_father = {
										OR = {
											trait = god
											trait = demi_god
										}
									}
								}
							}
						}
					}
					set_character_flag = gain_blood_of_the_gods
				}
				else = {
					random_list = {
						9 = {
							set_character_flag = gain_blood_of_the_gods
						}
						1 = {
							modifier = {
								factor = 0.6
								has_game_rule = { name = breeding value = strong }
							}
							modifier = {
								factor = 1.5
								has_game_rule = { name = breeding value = weak }
							}
						}
					}
				}
				if = { # Sanity check - Gods and demi-gods always have divine blood
					limit = {
						OR = {
							trait = god
							trait = demi_god
						}
					}
					set_character_flag = gain_blood_of_the_gods
				}
			}
			# Add bloodline
			if = {
				limit = { has_character_flag = gain_blood_of_the_gods }
				clr_character_flag = gain_blood_of_the_gods
				# Both parents have a specific bloodline - get one at random
				if = {
					limit = {
						mother = { any_owned_bloodline = { has_bloodline_flag = specific_god } }
						event_target:true_father = { any_owned_bloodline = { has_bloodline_flag = specific_god } }
					}
					random_list = {
						1 = {
							mother = {
								any_owned_bloodline = {
									limit = { has_bloodline_flag = BOTG }
									add_bloodline_member = ROOT
								}
							}
						}
						1 = {
							event_target:true_father = {
								any_owned_bloodline = {
									limit = { has_bloodline_flag = BOTG }
									add_bloodline_member = ROOT
								}
							}
						}
					}
				}
				# Mother has a specific bloodline
				else_if = {
					limit = {
						mother = { any_owned_bloodline = { has_bloodline_flag = specific_god } }
					}
					mother = {
						any_owned_bloodline = {
							limit = { has_bloodline_flag = BOTG }
							add_bloodline_member = ROOT
						}
					}
				}
				# Father has a specific bloodline
				else_if = {
					limit = {
						event_target:true_father = { any_owned_bloodline = { has_bloodline_flag = specific_god } }
					}
					event_target:true_father = {
						any_owned_bloodline = {
							limit = { has_bloodline_flag = BOTG }
							add_bloodline_member = ROOT
						}
					}
				}
				# Neither has a specific bloodline - Check for pantheon bloodlines
				# Both parents have a pantheon bloodline
				else_if = {
					limit = {
						mother = { any_owned_bloodline = { has_bloodline_flag = pantheon } }
						event_target:true_father = { any_owned_bloodline = { has_bloodline_flag = pantheon } }
					}
					random_list = {
						1 = {
							mother = {
								any_owned_bloodline = {
									limit = { has_bloodline_flag = BOTG }
									add_bloodline_member = ROOT
								}
							}
						}
						1 = {
							event_target:true_father = {
								any_owned_bloodline = {
									limit = { has_bloodline_flag = BOTG }
									add_bloodline_member = ROOT
								}
							}
						}
					}
				}
				# Mother has a pantheon bloodline
				else_if = {
					limit = {
						mother = { any_owned_bloodline = { has_bloodline_flag = pantheon } }
					}
					mother = {
						any_owned_bloodline = {
							limit = { has_bloodline_flag = BOTG }
							add_bloodline_member = ROOT
						}
					}
				}
				# Father has a pantheon bloodline
				else_if = {
					limit = {
						event_target:true_father = { any_owned_bloodline = { has_bloodline_flag = pantheon } }
					}
					event_target:true_father = {
						any_owned_bloodline = {
							limit = { has_bloodline_flag = BOTG }
							add_bloodline_member = ROOT
						}
					}
				}
				# Neither have a pantheon bloodline
				# Check for blood of the gods, patrilineally first unless religion uses enatic clans
				else_if = {
					limit = {
						event_target:true_father = { any_owned_bloodline = { has_bloodline_flag = BOTG } }
						NOT = { has_religion_feature = religion_matriarchal }
					}
					event_target:true_father = {
						any_owned_bloodline = {
							limit = { has_bloodline_flag = BOTG }
							add_bloodline_member = ROOT
						}
					}
				}
				else_if = {
					limit = { mother = { any_owned_bloodline = { has_bloodline_flag = BOTG } } }
					mother = {
						any_owned_bloodline = {
							limit = { has_bloodline_flag = BOTG }
							add_bloodline_member = ROOT
						}
					}
				}
				else = {
					event_target:true_father = {
						any_owned_bloodline = {
							limit = { has_bloodline_flag = BOTG }
							add_bloodline_member = ROOT
						}
					}
				}
			}
			# Djinn
			# Both parents are Djinni
			if = {
				limit = {
					event_target:true_father = { trait = djinn }
					mother_even_if_dead = { trait = djinn }
				}
				add_trait = djinn
			}
			else_if = {
				limit = {
					OR = {
						AND = {
							event_target:true_father = { trait = djinn }
							mother_even_if_dead = { NOT = { trait = djinn } }
						}
						AND = {
							event_target:true_father = { NOT = { trait = djinn } }
							mother_even_if_dead = { trait = djinn }
						}
					}
				}
				random_list = {
					1 = { add_trait = djinn }
					1 = {
						modifier = {
							factor = 0.6
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.5
							has_game_rule = { name = breeding value = weak }
						}
					}
				}
			}
			# Werewolf
			# Both parents are werewolves
			if = {
				limit = {
					event_target:true_father = { trait = werewolf }
					mother_even_if_dead = { trait = werewolf }
				}
				random = {
					chance = 80
					modifier = {
						factor = 1.5
						any_owned_bloodline = { has_bloodline_flag = child_werewolf }
					}
					add_trait = pup
				}
			}
			# One parent is a werewolf
			else_if = {
				limit = {
					OR = {
						event_target:true_father = { trait = werewolf }
						mother_even_if_dead = { trait = werewolf }
					}
				}
				random = {
					chance = 40
					modifier = {
						factor = 1.5
						any_owned_bloodline = { has_bloodline_flag = child_werewolf }
					}
					add_trait = pup
				}
			}
			# No werewolf parent
			else = {
				random = {
					chance = 5
					modifier = {
						factor = 0.6
						event_target:true_father = { trait = vampire }
					}
					modifier = {
						factor = 0.6
						mother_even_if_dead = { trait = vampire }
					}
					modifier = {
						factor = 1.5
						any_owned_bloodline = { has_bloodline_flag = child_werewolf }
					}
					add_trait = pup
				}
			}
			# Remove pup on certain characters
			if = {
				limit = {
					OR = {
						trait = dragon
						trait = djinn
						trait = demon_trait
						trait = ethereal_trait
					}
				}
				remove_trait = pup
			}
			# Set initial control for Pups as a variable. Will become a trait on adulthood
			if = {
				limit = { trait = pup }
				if = {
					limit = {
						event_target:true_father = { trait = werewolf }
						mother_even_if_dead = { trait = werewolf }
					}
					set_variable = { which = control which = event_target:true_father }
					mother_even_if_dead = {
						ROOT = {
							change_variable = { which = control which = PREV }
						}
					}
					divide_variable = { which = control value = 2 }
					control_restrict_range = yes
				}
				else_if = {
					limit = {
						real_father_even_if_dead = { trait = werewolf }
						mother_even_if_dead = { NOT = { trait = werewolf } }
					}
					set_variable = { which = control which = event_target:true_father }
					multiply_variable = { which = control value = 2 }
					divide_variable = { which = control value = 3 }
					control_restrict_range = yes
				}
				else_if = {
					limit = {
						event_target:true_father = { NOT = { trait = werewolf } }
						mother_even_if_dead = { trait = werewolf }
					}
					set_variable = { which = control which = event_target:true_father }
					multiply_variable = { which = control value = 2 }
					divide_variable = { which = control value = 3 }
					control_restrict_range = yes
				}
				else = {
					set_variable = { which = control value = 2 }
				}
			}
			if = {
				limit = {
					trait = pup
					age = 16
				}
				remove_trait = pup
				update_control = yes
			}
			# Giant
			# Both parents are giants
			if = {
				limit = {
					event_target:true_father = { trait = mythos_giant }
					mother_even_if_dead = { trait = mythos_giant }
				}
				add_trait = mythos_giant
			}
			# One giant and one human
			else_if = {
				limit = {
					OR = {
						AND = {
							event_target:true_father = { trait = mythos_giant }
							mother_even_if_dead = { 
								NOR = {
									trait = mythos_giant
									trait = half_giant
								}
							}
						}
						AND = {
							mother_even_if_dead = { trait = mythos_giant }
							event_target:true_father = { 
								NOR = {
									trait = mythos_giant
									trait = half_giant
								}
							}
						}
					}
				}
				add_trait = half_giant
			}
			# Both half-giant
			else_if = {
				limit = {
					event_target:true_father = { trait = half_giant }
					mother_even_if_dead = { trait = half_giant }
				}
				random_list = {
					2 = {
						add_trait = mythos_giant
					}
					2 = {
						modifier = {
							factor = 0.6
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.5
							has_game_rule = { name = breeding value = weak }
						}
					}
					6 = {
						modifier = {
							factor = 0.8
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.2
							has_game_rule = { name = breeding value = weak }
						}
						add_trait = half_giant
					}
				}
			}
			# One half-giant, one human
			else_if = {
				limit = {
					OR = {
						AND = {
							event_target:true_father = { trait = half_giant }
							mother_even_if_dead = {
								NOR = {
									trait = mythos_giant
									trait = half_giant
								}
							}
						}
						AND = {
							mother_even_if_dead = { trait = half_giant }
							event_target:true_father = {
								NOR = {
									trait = mythos_giant
									trait = half_giant
								}
							}
						}
					}
				}
				random_list = {
					4 = {
						add_trait = half_giant
					}
					6 = {
						modifier = {
							factor = 0.6
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.5
							has_game_rule = { name = breeding value = weak }
						}
					}
				}
			}
			# One half-giant, one giant
			else_if = {
				limit = {
					OR = {
						AND = {
							event_target:true_father = { trait = half_giant }
							mother_even_if_dead = { trait = mythos_giant }
						}
						AND = {
							mother_even_if_dead = { trait = half_giant }
							event_target:true_father = { trait = mythos_giant }
						}
					}
				}
				random_list = {
					2 = {
						add_trait = mythos_giant
					}
					5 = {
						add_trait = half_giant
					}
					3 = {
						modifier = {
							factor = 0.6
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.5
							has_game_rule = { name = breeding value = weak }
						}
					}
				}
			}
			# Special - Giants or half giants where one parent is a god or demigod but other is giant
			# may become horse (Sleipnir), dragon (Jormungandr), or pup (Fenrir)
			if = {
				limit = {
					OR = {
						trait = mythos_giant
						trait = half_giant
					}
					OR = {
						AND = {
							event_target:true_father = {
								OR = {
									trait = god
									trait = demi_god
								}
							}
							mother_even_if_dead = { trait = mythos_giant }
						}
						AND = {
							mother_even_if_dead = {
								OR = {
									trait = god
									trait = demi_god
								}
							}
							event_target:true_father = { trait = mythos_giant }
						}
					}
				}
				random_list = {
					1 = {
						remove_trait = mythos_giant
						remove_trait = half_giant
						add_trait = horse
						set_graphical_culture = horse
					}
					1 = {
						remove_trait = mythos_giant
						remove_trait = half_giant
						add_trait = dragon
						set_graphical_culture = draconic
					}
					1 = {
						modifier = {
							factor = 2
							any_owned_bloodline = { has_bloodline_flag = child_werewolf }
						}
						remove_trait = mythos_giant
						remove_trait = half_giant
						add_trait = pup
						set_character_flag = giant_born_werewolf
						set_variable = { which = control value = 1 }
					}
					17 = {
						modifier = {
							factor = 0.6
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.5
							has_game_rule = { name = breeding value = weak }
						}
					}
				}
			}
		}
		# Character with one parent
		else_if = {
			limit = {
				OR = {
					event_target:true_father = { always = yes }
					mother_even_if_dead = { always = yes }
				}
			}
			# Set parent
			if = {
				limit = {
					event_target:true_father = { always = yes }
				}
				event_target:true_father = { save_event_target_as = parent }
			}
			else = {
				mother_even_if_dead = { save_event_target_as = parent }
			}
			# Parent is dragon
			if = {
				limit = { event_target:parent = { trait = dragon } }
				random_list = {
					7 = {
						add_trait = dragon
						set_graphical_culture = draconic
					}
					3 = {
						modifier = {
							factor = 0.6
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.5
							has_game_rule = { name = breeding value = weak }
						}
						add_trait = dragonborn
						set_graphical_culture = frankish
					}
				}
			}
			# Dragonborn
			else_if = {
				limit = { event_target:parent = { trait = dragonborn } }
				random_list = {
					1 = {
						add_trait = dragon
						set_graphical_culture = draconic
						remove_trait = dragonborn
					}
					60 = {
						modifier = {
							factor = 0.8
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.2
							has_game_rule = { name = breeding value = weak }
						}
						add_trait = dragonborn
						remove_trait = dragon
						set_graphical_culture = event_target:parent
					}
					39 = {
						modifier = {
							factor = 0.6
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.5
							has_game_rule = { name = breeding value = weak }
						}
						set_graphical_culture = event_target:parent
						remove_trait = dragonborn
						remove_trait = dragon
					}
				}
			}
			# Parent is neither dragon nor dragonborn
			else = {
				remove_trait = dragonborn
				remove_trait = dragon
				if = {
					limit = { graphical_culture = dragongfx }
					set_graphical_culture = event_target:parent
				}
			}
			# Werewolf
			if = {
				limit = { event_target:parent = { trait = werewolf } }
				if = {
					limit = {
						NOR = {
							trait = werewolf
							trait = pup
						}
					}
					random = {
						chance = 50
						modifier = {
							factor = 1.5
							any_owned_bloodline = { has_bloodline_flag = child_werewolf }
						}
						if = {
							limit = { age = 16 }
							add_trait = werewolf
						}
						else = {
							add_trait = pup
						}
					}
				}
				if = {
					limit = {
						OR = {
							trait = werewolf
							trait = pup
						}
					}
					set_variable = { which = control which = event_target:parent }
					decrease_control = yes
				}
			}
			# God
			if = {
				limit = { event_target:parent = { trait = god } }
				random_list = {
					1 = {
						add_trait = god
						set_character_flag = ai_flag_refuse_conversion
					}
					1 = {
						modifier = {
							factor = 0.6
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.5
							has_game_rule = { name = breeding value = weak }
						}
						add_trait = demi_god
						set_character_flag = ai_flag_refuse_conversion
					}
				}
				if = {
					limit = { has_dlc = "Holy Fury" }
					event_target:parent = {
						any_owned_bloodline = {
							limit = { has_bloodline_flag = BOTG }
							add_bloodline_member = ROOT
						}
					}
				}
			}
			# Demigod
			else_if = {
				limit = { event_target:parent = { trait = demi_god } }
				random_list = {
					1 = {
						add_trait = demi_god
						set_character_flag = ai_flag_refuse_conversion
					}
					9 = {
						modifier = {
							factor = 0.6
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.5
							has_game_rule = { name = breeding value = weak }
						}
						add_trait = blood_of_the_gods
					}
				}
				if = {
					limit = { has_dlc = "Holy Fury" }
					event_target:parent = {
						any_owned_bloodline = {
							limit = { has_bloodline_flag = BOTG }
							add_bloodline_member = ROOT
						}
					}
				}
			}
			# Blood of the God
			else_if = {
				limit = { event_target:parent = { trait = blood_of_the_gods } }
				random_list = {
					3 = {
						if = {
							limit = { NOT = { has_dlc = "Holy Fury" } }
							add_trait = blood_of_the_gods
						}
						else = {
							event_target:parent = {
								any_owned_bloodline = {
									limit = { has_bloodline_flag = BOTG }
									add_bloodline_member = ROOT
								}
							}
						}
					}
					7 = {
						modifier = {
							factor = 0.6
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.5
							has_game_rule = { name = breeding value = weak }
						}
					}
				}
			}
			# Djinn
			if = {
				limit = { event_target:parent = { trait = djinn } }
				random_list = {
					8 = { add_trait = djinn }
					2 = {
						modifier = {
							factor = 0.6
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.5
							has_game_rule = { name = breeding value = weak }
						}
					}
				}
			}
			# Giant
			if = {
				limit = { event_target:parent = { trait = mythos_giant } }
				random_list = {
					8 = { add_trait = mythos_giant }
					2 = { 
						modifier = {
							factor = 0.6
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.5
							has_game_rule = { name = breeding value = weak }
						}
						add_trait = half_giant
					}
				}
			}
			# Half-giant
			else_if = {
				limit = { event_target:parent = { trait = half_giant } }
				random_list = {
					8 = { add_trait = half_giant }
					2 = {
						modifier = {
							factor = 0.6
							has_game_rule = { name = breeding value = strong }
						}
						modifier = {
							factor = 1.5
							has_game_rule = { name = breeding value = weak }
						}
					}
				}
			}
			# Ethereal - shouldn't happen. Tend towards childhood death.
			if = {
				limit = { event_target:parent = { trait = ethereal_trait } }
				if = {
					limit = { NOT = { age = 16 } }
					add_trait = sickly
				}
				else = {
					add_trait = cancer
				}
				add_trait = stressed
				add_trait = depressed
				add_trait = possessed
			}
			# Demon - shouldn't happen. Be possessed
			if = {
				limit = { event_target:parent = { trait = demon_trait } }
				add_trait = stressed
				add_trait = possessed
			}
		}
		# No parents
		else = {
			set_character_flag = test_no_parents
			if = {
				limit = { graphical_culture = dragongfx }
				add_trait = dragon
			}
			else_if = {
				limit = { graphical_culture = demongfx }
				add_trait = demon_trait
			}
			else_if = {
				limit = { graphical_culture = etherealgfx }
				add_trait = ethereal_trait
			}
			else_if = {
				limit = {
					OR = {
						graphical_culture = undeadgfx
						culture_group = undead_culture_group
					}
				}
				add_trait = zombie
				set_graphical_culture = undead_revenant
				set_undead_culture = yes
				if = {
					limit = { ai = no } # Not playable
					abdicate = yes
				}
				religion = the_damned
				any_claim = { remove_claim = PREV }
				character_event = { id = ZOMBIE.39 }
			}
			else = {
				remove_trait = dragon
				remove_trait = demon_trait
				remove_trait = ethereal_trait
				remove_trait = dragonborn
				remove_trait = zombie
			}
			if = {
				limit = {
					OR = {
						trait = werewolf
						trait = pup
					}
					check_variable = { which = control value < 1 }
				}
				set_variable = { which = control value = 5 }
				update_control = yes
			}	
		}
		
		if = {
			limit = { 
				age = 16
				trait = pup
			}
			character_event = { id = WEREWOLF.4 }
		}
		if = {
			limit = {
				trait = werewolf
			}
			update_control = yes
			if = {
				limit = { NOT = { trait = known_werewolf } }
				add_trait = secret_werewolf
			}
		}
		if = {
			limit = {
				trait = vampire
				NOT = { trait = known_vampire }
			}
			add_trait = secret_vampire
		}
		if = {
			limit = {
				OR = {
					trait = vampire
					trait = werewolf
				}
			}
			character_event = { id = SPECIES.3 } # Update known/secret and control
		}
		
		update_sickly_trait = yes
		
		if = {
			limit = {
				any_owned_bloodline = { has_bloodline_flag = always_heritage }
			}
			add_trait = magic_heritage
		}
		
		# Last check for false dragons
		if = {
			limit = {
				graphical_culture = dragongfx
				NOT = { trait = dragon }
			}
			if = {
				limit = { NOT = { event_target:true_father = { graphical_culture = dragongfx } } }
				set_graphical_culture = event_target:true_father
			}
			else_if = {
				limit = { NOT = { mother_even_if_dead = { graphical_culture = dragongfx } } }
				set_graphical_culture = mother_even_if_dead
			}
			else = {
				set_graphical_culture = norse
			}
		}
		
		# Minor variable hiccup for draconic pagans
		if = {
			limit = {
				OR = {
					religion = draconic_pagan
					religion = draconic_pagan_reformed
				}
			}
			set_variable = { which = purity_level value = 0 }
			add_trait = purity_0x0
		}
		
		if = {
			limit = { trait = vampire }
			add_trait = hunger_0
		}
		
		character_event = { id = SPECIES.11 }
	}
}

# SPECIES.3 - periodic sanity check to remove known werewolf from non-werewolves and add secret werewolf to unknown werewolves
# Also vampires
character_event = {
	id = SPECIES.3
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		OR = {
			AND = {
				trait = known_werewolf
				NOT = { trait = werewolf }
			}
			AND = {
				trait = werewolf
				NOT = { trait = known_werewolf }
				NOT = { trait = secret_werewolf }
			}
			AND = {
				trait = known_vampire
				NOT = { trait = vampire }
			}
			AND = {
				trait = vampire
				NOR = {
					trait = known_vampire
					trait = secret_vampire
				}
			}
		}
	}
	
	immediate = {
		if = {
			limit = {
				NOT = { trait = werewolf }
				trait = known_werewolf
			}
			remove_trait = known_werewolf
			set_variable = { which = control value = 0 }
			remove_trait = control_1
			remove_trait = control_2
			remove_trait = control_3
			remove_trait = control_4
			remove_trait = control_5
			remove_trait = control_6
			remove_trait = control_7
			remove_trait = control_8
			remove_trait = control_9
		}
		else_if = {
			limit = {
				trait = werewolf
				NOR = {
					trait = known_werewolf
					trait = secret_werewolf
				}
			}
			add_trait = secret_werewolf
			if = {
				limit = { check_variable = { which = control value < 1 } }
				character_event = { id = WEREWOLF.96 } # Set initial control
			}
		}
		else_if = {
			limit = {
				NOT = { trait = vampire }
				trait = known_vampire
			}
			remove_trait = known_vampire
			remove_trait = hunger_0
			clear_hunger_trait = yes
		}
		else_if = {
			limit = { 
				trait = vampire
				NOR = {
					trait = known_vampire
					trait = secret_vampire
				}
			}
			add_trait = secret_vampire
		}
	}
}

# SPECIES.4 - Species based infertility.  Called yearly and gives infertility based on race
character_event = {
	id = SPECIES.4
	hide_window = yes
	
	is_triggered_only = yes
	
	min_age = 45 # Humans reach menopause the youngest, at 45
	only_women = yes # Men don't become infertile through age
	
	trigger = {
		NOR = {
			#trait = infertile
			trait = god
			trait = immortal
			trait = zombie # Undead should always be infertile
			trait = mummy
			trait = known_vampire
			any_owned_bloodline = {
				has_bloodline_flag = bloodline_effect_no_menopause
			}
		}
	}
	
	immediate = {
		if = {
			limit = {
				OR = {
					trait = dragon
					trait = demi_god
					# Lives to about 180 from racial trait
				}
			}
			if = {
				limit = { age = 135 }
				add_trait = infertile
			}
			if = {
				limit = { NOT = { age = 135 } }
				remove_trait = infertile
			}
			break = yes
		}
		if = {
			limit = {
				OR = {
					trait = giant
					trait = djinn
					# Lives to about 100 from racial trait
				}
			}
			if = {
				limit = { age = 65 }
				add_trait = infertile
			}
			if = {
				limit = { NOT = { age = 65 } }
				remove_trait = infertile
			}
			break = yes
		}
		if = {
			limit = {
				OR = {
					trait = werewolf
					trait = half_giant
					trait = blood_of_the_gods
					trait = dragonborn
					any_owned_bloodline = {
						has_bloodline_flag = BOTG
					}
					# Lives a bit longer than normal
				}
			}
			if = {
				limit = { age = 50 }
				add_trait = infertile
			}
			if = {
				limit = { NOT = { age = 50 } }
				remove_trait = infertile
			}
			add_trait = infertile
			break = yes
		}
		if = {
			limit = {
				age = 45
			}
			add_trait = infertile
		}
	}
}

# SPECIES.6 - Fire on chronicle start to mark all premade charactes as the right race
character_event = {
	id = SPECIES.6
	hide_window = yes
	
	is_triggered_only = yes
	
	immediate = {
		any_character = { 
			if = {
				limit = { ai = no }
				set_character_flag = checked_race
			}
			if = {
				limit = {
					OR = {
						trait = novice_mage
						trait = eldritch_scholar
						trait = veteran_wizard
						trait = arcane_master
					}
					NOT = { trait = magic_heritage }
				}
				add_trait = magic_heritage
			}
			else_if = {
				limit = {
					any_owned_bloodline = { has_bloodline_flag = always_heritage }
				}
				add_trait = magic_heritage
			}
			if = {
				limit = {
					OR = {
						trait = vampire
						trait = werewolf
					}
				}
				character_event = { id = SPECIES.3 }
			}
		}
	}
}
# SPECIES.7 - Heir based modifiers
character_event = {
	id = SPECIES.7
	hide_window = yes
	is_triggered_only = yes
	
	only_playable = yes
	
	immediate = {
		if = {
			limit = { culture = werewolf_culture }
			if = {
				limit = {
					current_heir = {
						NOT = { trait = known_werewolf }
						age = 16
					}
				}
				add_character_modifier = { name = non_werewolf_heir }
			}
		}
		if = {
			limit = {
				OR = {
					NOT = {culture = werewolf_culture }
					current_heir = {
						OR = {
							trait = known_werewolf
							NOT = { age = 16 }
						}
					}
				}
			}
			remove_character_modifier = non_werewolf_heir
		}
		if = {
			limit = {
				OR = {
					government = draconic_feudal_government
					government = draconic_tribal_government
					government = draconic_governorship
					government = draconic_merchant_republic_government
				}
			}
			if = {
				limit = {
					current_heir = {
						NOR = {
							trait = dragon
							trait = dragonborn
						}
					}
				}
				add_character_modifier = { name = non_dragon_heir }
			}
			if = {
				limit = {
					current_heir = {
						trait = dragonborn
					}
				}
				add_character_modifier = { name = non_dragon_heir_lesser }
			}
			if = {
				limit = {
					NOR = {
						trait = dragon
						trait = dragonborn
					}
				}
				add_character_modifier = { name = non_dragon_ruler }
			}
		}
		if = {
			limit = {
				current_heir = { trait = dragon }
			}
			remove_character_modifier = non_dragon_heir
			remove_character_modifier = non_dragon_heir_lesser
		}
		if = {
			limit = {
				NOR = {
					government = draconic_feudal_government
					government = draconic_tribal_government
					government = draconic_governorship
					government = draconic_merchant_republic_government
				}
			}
			remove_character_modifier = non_dragon_heir
			remove_character_modifier = non_dragon_heir_lesser
			remove_character_modifier = non_dragon_ruler
		}
		if = {
			limit = {
				culture = vampire_culture
				current_heir = {
					NOR = {
						trait = known_vampire
						age = 16
					}
				}
			}
			add_character_modifier = { name = non_vampire_heir }
		}
		if = {
			limit = {
				OR = {	
					NOT = { culture = vampire_culture }
					current_heir = { 
						OR = {
							trait = known_vampire
							age < 16
						}
					}
				}
			}
			remove_character_modifier = non_vampire_heir
		}
	}
}
# SPECIES.8 - Re-evaluate heir for dynasts and liege (Not just parents, because seniority)
character_event = {
	id = SPECIES.8
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		any_dynasty_member = { character_event = { id = SPECIES.7 } }
		any_liege = { character_event = { id = SPECIES.7 } }
	}
}
# SPECIES.9 - Remove and re-add God on adulthood so gods age correctly
character_event = {
	id = SPECIES.9
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		trait = god
	}
	
	immediate = {
		remove_trait = god
		character_event = { id = SPECIES.10 days = 1 }
	}
}

# SPECIES.10 - Re-add God on adulthood
character_event = {
	id = SPECIES.10
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		NOT = { trait = god }
	}
	
	immediate = {
		add_trait = god
	}
}

# SPECIES.11 - Add Giant subtraits
character_event = {
	id = SPECIES.11
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		NOT = { has_character_flag = checked_giant }
		trait = mythos_giant
	}
	
	immediate = {
		if = {
			limit = {
				OR = {
					culture_group = north_germanic
					religion = norse_pagan_reformed
					religion = norse_pagan
					religion = jotnar
					religion = jotnar_reformed
				}
				NOR = {
					trait = giant_hrimthursar
					trait = giant_eldjotnar
					trait = giant_bergrisar
				}
			}
			random_list = {
				# Frost Giant
				1 = {
					modifier = {
						factor = 3
						event_target:true_father = { trait = giant_hrimthursar }
					}
					modifier = {
						factor = 3
						mother_even_if_dead = { trait = giant_hrimthursar }
					}
					modifier = { # Born in winter
						factor = 2
						OR = {
							month_of_birth = 12
							month_of_birth <= 2
						}
					}
					add_trait = giant_hrimthursar
				}
				# Fire Giant
				1 = {
					modifier = {
						factor = 3
						event_target:true_father = { trait = giant_eldjotnar }
					}
					modifier = {
						factor = 3
						mother_even_if_dead = { trait = giant_eldjotnar }
					}
					modifier = { # Born in summer
						factor = 2
						month_of_birth = 6
						month_of_birth <= 8
					}
					add_trait = giant_eldjotnar
				}
				# Hill Giant
				1 = {
					modifier = {
						factor = 3
						event_target:true_father = { trait = giant_bergrisar }
					}
					modifier = {
						factor = 3
						mother_even_if_dead = { trait = giant_bergrisar }
					}
					modifier = { # Born in spring or autumn
						factor = 2
						OR = {
							AND = {
								month_of_birth = 3
								month_of_birth <= 5
							}
							AND = {
								month_of_birth = 9
								month_of_birth <= 11
							}
						}
					}
					add_trait = giant_bergrisar
				}
			}
		}
		set_character_flag = checked_giant
		character_event = { id = GIANT.1 }
	}
}

# Update Djinn Natural Magic (yearly and at start)
character_event = {
	id = SPECIES.12
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		trait = djinn
	}
	
	immediate = {
		update_natural_magic = yes
		if = {
			limit = {
				NOR = {
					trait = novice_mage
					trait = eldritch_scholar
					trait = veteran_wizard
					trait = arcane_master
				}
			}
			remove_trait = natural_magic_1
			remove_trait = natural_magic_2
			remove_trait = natural_magic_3
			remove_trait = natural_magic_4
		}
	}
}

# Cancel Pregnancy from vampires
character_event = {
	id = SPECIES.13
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		OR = {
			trait = vampire
			father_of_unborn = { trait = vampire }
		}
	}
	
	immediate = {
		cancel_pregnancy = yes
	}
}

# On startup, replace Blood of the Gods for players with a bloodline
character_event = {
	id = SPECIES.14
	hide_window = yes
	is_triggered_only = yes
	
	has_dlc = "Holy Fury"
	only_playable = yes
	ai = no
	
	trigger = {
		NOT = { any_owned_bloodline = { has_bloodline_flag = BOTG } }
		OR = {
			trait = blood_of_the_gods
			trait = god
			trait = demi_god
		}
	}
	
	immediate = {
		remove_trait = blood_of_the_gods
		if = {
			limit = { religion_openly_hellenic_or_reformed_trigger = yes }
			create_bloodline = {
				type = BL_blood_of_olympus
			}
		}
		else_if = {
			limit = { religion_openly_norse_or_reformed_trigger = yes }
			create_bloodline = {
				type = BL_blood_of_asgard
			}
		}
		else = {
			create_bloodline = {
				type = BL_blood_of_the_gods_generic
				religion = ROOT
			}
		}
	}
}

# On startup, add bloodlines to gods not gaining them through history
character_event = {
	id = SPECIES.15
	hide_window = yes
	is_triggered_only = yes
	
	religion_group = pagan_group
	ai = yes
	
	trigger = {
		OR = {
			trait = god
			trait = demi_god
		}
		NOT = {
			any_owned_bloodline = { has_bloodline_flag = BOTG }
		}
		OR = {
			mother_even_if_dead = { any_owned_bloodline = { has_bloodline_flag = BOTG } }
			true_father_even_if_dead = { any_owned_bloodline = { has_bloodline_flag = BOTG } }
		}
	}
	
	immediate = {
		if = {
			limit = {
				true_father_even_if_dead = {
					any_owned_bloodline = { has_bloodline_flag = specific_god }
				}
			}
			true_father_even_if_dead = {
				random_owned_bloodline = {
					limit = { has_bloodline_flag = specific_god }
					add_bloodline_member = ROOT
				}
			}
		}
		else_if = {
			limit = {
				mother_even_if_dead = {
					any_owned_bloodline = { has_bloodline_flag = specific_god }
				}
			}
			mother_even_if_dead = {
				random_owned_bloodline = {
					limit = { has_bloodline_flag = specific_god }
					add_bloodline_member = ROOT
				}
			}
		}
		else_if = {
			limit = {
				true_father_even_if_dead = {
					any_owned_bloodline = { has_bloodline_flag = pantheon }
				}
			}
			true_father_even_if_dead = {
				random_owned_bloodline = {
					limit = { has_bloodline_flag = pantheon }
					add_bloodline_member = ROOT
				}
			}
		}
		else_if = {
			limit = {
				mother_even_if_dead = {
					any_owned_bloodline = { has_bloodline_flag = pantheon }
				}
			}
			mother_even_if_dead = {
				random_owned_bloodline = {
					limit = { has_bloodline_flag = pantheon }
					add_bloodline_member = ROOT
				}
			}
		}
		else_if = {
			limit = {
				true_father_even_if_dead = {
					any_owned_bloodline = { has_bloodline_flag = BOTG }
				}
			}
			true_father_even_if_dead = {
				random_owned_bloodline = {
					limit = { has_bloodline_flag = BOTG }
					add_bloodline_member = ROOT
				}
			}
		}
		else_if = {
			limit = {
				mother_even_if_dead = {
					any_owned_bloodline = { has_bloodline_flag = BOTG }
				}
			}
			mother_even_if_dead = {
				random_owned_bloodline = {
					limit = { has_bloodline_flag = BOTG }
					add_bloodline_member = ROOT
				}
			}
		}
	}
}

# Call Species.2 if a character is newly created
character_event = {
	id = SPECIES.16
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		FROM = { character = no } # Ignore the validator, this works
	}
	immediate = {
		if = {
			limit = { NOT = { has_character_flag = checked_race } }
			add_trait = race_placeholder
		}
		repeat_event = { id = SPECIES.2 } # Repeat event to keep scopes correct
	}
}

# Monthly event setup. Annual event that manages the monthly events
character_event = {
	id = SPECIES.17
	hide_window = yes
	is_triggered_only = yes
	
	# No filtering, handle that in the events themselves to avoid any delay if something about the character changes
	
	immediate = {
		character_event = { id = SPECIES.18 } # Doesn't necessarily fire in January, but try to match the Julian calendar minus leap years for even spacing
		character_event = { id = SPECIES.18 days = 31 }
		character_event = { id = SPECIES.18 days = 59 }
		character_event = { id = SPECIES.18 days = 90 }
		character_event = { id = SPECIES.18 days = 121 }
		character_event = { id = SPECIES.18 days = 151 }
		character_event = { id = SPECIES.18 days = 182 }
		character_event = { id = SPECIES.18 days = 212 }
		character_event = { id = SPECIES.18 days = 243 }
		character_event = { id = SPECIES.18 days = 274 }
		character_event = { id = SPECIES.18 days = 304 }
		character_event = { id = SPECIES.18 days = 335 }
	}
}

# Monthly event
character_event = {
	id = SPECIES.18
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {
		# Zombies gain troops
		character_event = { id = ZOMBIE.11 }
		# New Purity system
		character_event = { id = DRAGON.176 }
		# New Hunger system
		character_event = { id = VAMPIRE.202 }
		# Bank bloodline gains interest
		character_event = { id = BANK.33 }
	}
}

# Lower health of incapable characters
# Makes having long-lived characters become incapable less extreme
character_event = {
	id = SPECIES.19
	hide_window = yes
	is_triggered_only = yes
	
	trigger = {
		trait = incapable
	}
	
	immediate = {
		health = -0.2
	}
}